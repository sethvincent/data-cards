{
  "name": "virtual-model",
  "description": "turn templates into virtual dom",
  "version": "1.3.0",
  "repository": {
    "url": "git://github.com/sethvincent/virtual-model.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "node test.js",
    "start": "wzrd example.js"
  },
  "dependencies": {
    "amp-is-string": "^1.0.1",
    "component-emitter": "^1.1.3",
    "html-to-vdom": "^0.5.5",
    "observify": "^1.1.0",
    "observify-keypath": "^1.0.0",
    "virtual-dom": "^2.0.1"
  },
  "devDependencies": {
    "lodash.template": "^2.4.1",
    "tape": "^3.2.0",
    "wzrd": "^1.2.1"
  },
  "readme": "# virtual-model\n\nTurn a template into a virtual dom. \n\n## See also\n\n`virtual-model` uses [virtual-dom](http://npmjs.org/virtual-dom), [virtual-html](http://npmjs.org/virtual-html), and [observify](http://npmjs.org/observify).\n\nThis project is called virtual-model, but it really acts as both a model & view, similar to projects like [Ractive](https://github.com/ractivejs/ractive) and [Vue.js](https://github.com/yyx990803/vue), and was inspired by [ampersand-virtual-dom-mixin](https://www.npmjs.com/package/ampersand-virtual-dom-mixin).\n\n## Example\n\n```js\nvar template = require('lodash.template');\nvar model = require('virtual-model');\n\nvar str = '<div style=\"height:500px; background-image: url(<%= img %>);\"';\nstr += ' data-foo=\"<%= foo %>\"><%= text %> <%= count %></div>';\n\nvar options = {\n  el: document.body,\n  template: template(str),\n  data: { \n    count: 0,\n    text: 'pizzzzzaaaaa',\n    img: 'http://a.fod4.com/misc/Internet%20Pizza.gif'\n  }\n};\n\nvar counter = model(options);\n\nsetInterval(function () {\n  options.data.count += 2;\n\n  if (options.data.count == 10) {\n    options.data.text += ' is awesoooooooome';\n  }\n\n  counter.set(options.data);\n}, 2700);\n```\n\n## Install\n\n```\nnpm install --save virtual-model\n```\n\n## Usage\n\n### var model = require('virtual-model');\n\n### var example = model(options[, callback]);\n\nThe `options` object has three properties:\n\n- **template**\n  - can take a string or a compiled template function like `Handlebars.compile(str)`\n- **data**\n  - _optional._ an object with the data you want to pass to the template function\n- **el**\n  - _optional._ the html node that will serve as the parent element for the view\n\nThe optional callback provides an `err` parameter that exists if there was an error parsing the html.\n  \n## Methods\n\n### example.render([callback]);\n\nRenders the the template with the data and updates the element.\n\nThe optional callback provides an `err` parameter that exists if there was an error parsing the html.\n\n### example.set([keypath, ]data);\n\n`data` is an object, array, or value that will update the data of the model and automatically run `example.render()` to update the dom.\n\nOptionally specify the `keypath` for the property in the data that you'd like to set. The keypath can be nested, like this: `'some.nested.path'`, where the data in the model looks like this:\n\n```js\n{ some: { nested: { path: 'value' } } }\n```\n\n### example.get([keypath]);\n\nGet data from the model. Optionally specify a keypath to get a specific property from the data.\n\nLike the `.set` method, the keypath can be nested.\n\n### example.html();\n\nReturns the current html.\n\n### example.appendTo(el);\n\nThe `el` argument is the html node that will serve as the parent element of the view.\n\n## Properties\n\n### example.tree\n\nThe [virtual-dom](https://github.com/Matt-Esch/virtual-dom) tree.\n\n### example.el\n\nThe element that can be added to the dom of the web page.\n\n## Events\n\n### example.on('change', function (value) {});\n\n### example.on('update', function (model) {});\n\n## License\n\nMIT",
  "readmeFilename": "README.md",
  "gitHead": "ce72459cff909ee753f9fb3e281e4ae5d6f4179c",
  "bugs": {
    "url": "https://github.com/sethvincent/virtual-model/issues"
  },
  "homepage": "https://github.com/sethvincent/virtual-model",
  "_id": "virtual-model@1.3.0",
  "_shasum": "a103b0e9d09fbb1c234c928ceffd59aba2a1815f",
  "_from": "virtual-model@*"
}
